#!/usr/bin/env node

;(async () => {

const {
	getBranchList, getDefaultBranch, deleteBranch,
	NotFullyMergedError,
} = await import("./source/helpers.mjs")

const localBranches = await getBranchList()
const defaultBranch = await getDefaultBranch()
const currentBranch = localBranches.find(x => x.isCurrent)
const branchesToDelete = localBranches
	.filter(x => !x.isCurrent && x.name !== defaultBranch)
	.map(x => x.name)

const result = await Promise.all(branchesToDelete.map(async (branch) => {
	try {
		await deleteBranch(branch)
		return { branch, isDeleted: true }
	} catch(err) {
		if(err instanceof NotFullyMergedError) {
			return {
				branch,
				isDeleted: false,
				reason: 'not-merged',
			}
		} else {
			return {
				branch,
				isDeleted: false,
				reason: 'unknown',
				message: err.message,
			}
		}
	}
}))

const deletedBranches = result.filter(x => x.isDeleted).map(x => x.branch)
console.log(`Deleted branches: ${deletedBranches.length === 0 ? 0 : `${deletedBranches.length} (${deletedBranches.join(', ')})`}`)

if(currentBranch != null && currentBranch.name !== defaultBranch) {
	console.log(`Did not delete ${currentBranch.name}, because it is currently checked out`)
}
console.log(`Did not delete ${defaultBranch}, because it is the default branch`)

const undeletedBranches = result.filter(x => !x.isDeleted)
if(undeletedBranches.length > 0) {
	const unmergedBranches = undeletedBranches.filter(x => x.reason === 'not-merged')
	if(unmergedBranches.length > 0) {
		console.log(`${unmergedBranches.length === 1 ? '1 branch' : `${unmergedBranches.length} branches`} were not deleted because they were not merged`)
	}

	const diff = undeletedBranches.length !== unmergedBranches.length
	if(diff > 0) {
		for(const { branch, reason, message } of undeletedBranches.filter(x => x !== 'not-merged')) {
			console.log(`Could not delete ${branch}: ${message}`)
		}
	}
}
})().catch(error => {
	console.error(error.stack)
	process.exit(1)
})
